0 info it worked if it ends with ok
1 verbose cli [ 'D:\\Apps\\Node.js\\node.exe',
1 verbose cli   'D:\\Apps\\Node.js\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@3.10.10
3 info using node@v6.10.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: 'C:\\Workspace\\Projects\\test\\wechat-robot',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory C:\Users\doterlin\AppData\Roaming\npm-cache\wechat-robot\1.0.0\package.tgz not in flight; packing
9 verbose correctMkdir C:\Users\doterlin\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
10 info lifecycle wechat-robot@1.0.0~prepublish: wechat-robot@1.0.0
11 silly lifecycle wechat-robot@1.0.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ 'C:\\Users\\doterlin\\AppData\\Roaming\\npm-cache\\wechat-robot\\1.0.0\\package.tgz',
12 verbose tar pack   'C:\\Workspace\\Projects\\test\\wechat-robot' ]
13 verbose tarball C:\Users\doterlin\AppData\Roaming\npm-cache\wechat-robot\1.0.0\package.tgz
14 verbose folder C:\Workspace\Projects\test\wechat-robot
15 verbose addLocalTarball adding from inside cache C:\Users\doterlin\AppData\Roaming\npm-cache\wechat-robot\1.0.0\package.tgz
16 verbose correctMkdir C:\Users\doterlin\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
17 silly cache afterAdd wechat-robot@1.0.0
18 verbose afterAdd C:\Users\doterlin\AppData\Roaming\npm-cache\wechat-robot\1.0.0\package\package.json not in flight; writing
19 verbose correctMkdir C:\Users\doterlin\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
20 verbose afterAdd C:\Users\doterlin\AppData\Roaming\npm-cache\wechat-robot\1.0.0\package\package.json written
21 silly publish { name: 'wechat-robot',
21 silly publish   version: '1.0.0',
21 silly publish   description: 'A WeChat automatic response robot.',
21 silly publish   main: 'index.js',
21 silly publish   dependencies: { '_casperjs@1.1.4@casperjs': '^1.1.4', casperjs: '^1.1.4' },
21 silly publish   devDependencies: {},
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   keywords: [ 'wechat', 'robot', 'js' ],
21 silly publish   author: { name: 'doterlin' },
21 silly publish   license: 'ISC',
21 silly publish   readme: '![](http://upload-images.jianshu.io/upload_images/3169607-74099cb906bf59f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n[![Travis](https://img.shields.io/travis/rust-lang/rust.svg)]()\r\n[![npm](https://img.shields.io/badge/npm-v1.0-blue.svg)]()\r\n[![npm](https://img.shields.io/npm/l/express.svg)](https://github.com/doterlin/wechat-robot/blob/master/LICENSE)\r\n\r\n\r\n>基于`phantomjs`和web端微信开发的聊天机器人。使用的微信账号（即充当机器人的账号）为个人账号，可自定义指令。\r\n# 效果\r\n可以指定一个微信账号：\r\n\r\n![撩妹](http://upload-images.jianshu.io/upload_images/3169607-2068f9382b4f9f29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n自定义指令不会交给AI处理：\r\n\r\n![自定义指令](http://upload-images.jianshu.io/upload_images/3169607-a92574f783093df2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n独乐乐不如众乐乐，可以指定到群聊上：\r\n\r\n![微信群](http://upload-images.jianshu.io/upload_images/3169607-7c929617f3b2a790.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n在后台程序查看log：\r\n\r\n![命令行输出](http://upload-images.jianshu.io/upload_images/3169607-c80a66d579e79279.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n\r\n\r\n# 使用场景\r\n> + 微信智能回复，监控，统计等\r\n> + 便捷查询\r\n> + 娱(liao)乐(mei)\r\n\r\n\r\n# 如何使用\r\n### 1.安装环境\r\n下载好[源码](https://github.com/doterlin/wechat-robot)并安装以下环境：\r\n\r\n1.[node.js](https://nodejs.org/) \r\n2.[phantomjs](http://phantomjs.org/)\r\n3.[casperjs](http://casperjs.org/)\r\n\r\n\r\n### 2.配置\r\n找到并配置好`/config/const.js`\r\n```\r\n//机器人名字\r\nvar ROBOT_NAME = "小强";\r\n\r\nmodule.exports = {\r\n    //微信web版地址\r\n    \'URL\'          : \'https://wx.qq.com/\',\r\n\r\n    //机器人名字\r\n    \'ROBOT_NAME\'   : ROBOT_NAME,\r\n    \r\n    //图灵机器人apiKey和api地址\r\n    //AI部分使用的是第三方机器人图灵（http://www.tuling123.com/）\r\n    //这里只是示例，请大家自行到图灵官网注册并替换掉apikey免费版限5000次调用/天。有条件的同学可以付费支持下好产品\r\n    \'TURING_APIKEY\': \'99fecec3424d416898b91b0998e2b26a\',\r\n    \'TURING_URL\'   : \'http://www.tuling123.com/openapi/api\',\r\n\r\n    //锁定的微信号备注，注意是备注；如果是群聊则填群聊名称即可。\r\n    //填写的名称请预先在手机微信上搜索确认搜索结果是否出现在第一个\r\n    \'TARGET_NICK\'  : \'二十投小分队\',\r\n\r\n    //启动时打招呼消息\r\n    \'HELLO_WORLD\'  : \'[闪电]\' + ROBOT_NAME + \'[闪电]已启动...\',\r\n\r\n}\r\n```\r\n\r\n\r\n### 3.运行和登录微信\r\n**安装依赖和运行命令：**\r\n```\r\nnpm install\r\n```\r\n```\r\ncapserjs index.js\r\n```\r\n*如果提示`python找不到`之类的话请安装一下[python](https://www.python.org/)并保证其能运行在全局*\r\n\r\n**扫码登录微信**\r\n运行后看到如下提示时则扫一下弹出来的二维码：\r\n```\r\n正在加载二维码...\r\n已保存二维码，路径："static/img/qr.jpg".\r\n正在使用默认软件打开二维码，请用手机微信扫一扫确认登录 (若没有请手动打开)\r\n```\r\n请在`一分钟内`使用手机扫码并确认登录。出现`登录成功`和`发送欢迎语`提示后即可。这样就完成了使用步骤。下面的章节是介绍如何去扩展功能。\r\n\r\n# 指令和AI\r\n在这之前你可能需要两个方法：\r\n\r\n**message.send()**\r\n```\r\n//路径：src/utils/message.js\r\n//回复消息的方法message.send\r\n//使用如：\r\nvar message = require(\'/src/utils/message\');\r\n...\r\ncasper.then(function(){\r\n   message.send(this, \'你好\');\r\n})\r\n```\r\n\r\n**ajax() / ajax.get()  / ajax.post() / ajax.getJSON()**\r\n```\r\n//路径：src/utils/ajax.js\r\n//在聊天器调ajax的方法\r\n//使用如：\r\nvar  ajax= require(\'/src/utils/ajax\');\r\n...\r\ncasper.then(function(){\r\n   ajax(this, "http://example.com/getInfo", \'get\', {uid: 123}, function(res){\r\n        console.log(JSON.stringify(res));\r\n    });\r\n  \r\n   //或者\r\n   ajax.get(this, "http://example.com/getInfo", {uid: 123}, function(res){\r\n        console.log(JSON.stringify(res));\r\n    });\r\n\r\n   //jsonp\r\n   ajax.getJSON(this, "http://example.com/getInfo?calback=?", {uid: 123}, function(res){\r\n        console.log(JSON.stringify(res));\r\n   });\r\n})\r\n```\r\n你可以根据需要按以下方面扩充机器人的功能：\r\n##### 编写指令\r\n```\r\n//你可以写一些指令而不是交给AI处理\r\n//指令分为精确匹配指令和模糊匹配指令\r\n\r\n//-------------------------------------------------------------------\r\n//精确匹配\r\n//精确指令在`/src/directive/exact.js`下编写。\r\n//key是指令名称，值是一个方法，接受参数msgContent(用户发送的消息)和casperIns(casper实例)，如：\r\n//当对方发送\'关闭\'指令时程序提示并退出。\r\nmodule.exports = {\r\n    \'关闭\': function (msgContent, casperIns) {\r\n        message.send(casperIns, \'[玫瑰]感谢您的使用[玫瑰]\\n\\r([闪电]需要开启请在控制台启动程序[闪电])\');\r\n        casperIns.echo(\'微信发出关闭口令，程序退出。\')\r\n        return casperIns.exit();\r\n    }\r\n}\r\n\r\n//-------------------------------------------------------------------\r\n//模糊匹配\r\n//模糊匹配指令在`/src/directive/fuzzy.js`下编写。\r\n//接收参数前两个同精确指令，第三个是当前的正则表达式；\r\n//指令可单独防在src/directive/explain下方便维护，如weather.js：\r\n//匹配\'地名 + 天气\'，调用天气api\r\nvar weather = require(\'./explain/weather\');\r\nmodule.exports = {\r\n    \'/天气/g\': weather \r\n}\r\n//weather.js实现如下：\r\nvar ajax = require(\'../../utils/ajax\');\r\nvar message = require(\'../../utils/message\');\r\n\r\nvar formatWeather = function(local, weather) {\r\n    //此方法对返回的json格式化，详情请查看源码\r\n}\r\n\r\nvar weather = function(msgContent, casperIns, regex) {\r\n    var local = msgContent.replace(/ |天气/, \'\');\r\n    var resource = \'http://wthrcdn.etouch.cn/weather_mini?city=\' + encodeURIComponent(local);\r\n\r\n    ajax.get(casperIns, resource, {}, function(res){\r\n        var weather = JSON.parse(res);\r\n        if (weather.status == 1000) {\r\n            message.send(casperIns, formatWeather(local, weather));\r\n        } else {\r\n            message.send(casperIns, \'未查找到相关天气信息。请尝试输入格式如"广州天气"。\')\r\n        }\r\n    });\r\n   \r\n}\r\nmodule.exports = weather;\r\n//-------------------------------------------------------------------\r\n```\r\n\r\n##### 完善AI\r\n这个我目前也没研究。\r\n\r\n##### 调试\r\n调试代码时可将`capserjs`配置选像中的`logLevel`字段设为`info`将会显示更多`phantomjs`log，更多配置请移步[casperjs](http://casperjs.org/)文档。\r\n```\r\n//路径：config/casper.js\r\nmodule.exports =  {\r\n    clientScripts:  [\r\n        \'static/js/jquery.js\'\r\n    ],\r\n    pageSettings: {\r\n        loadImages: true,\r\n        userAgent: \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.14 Safari/537.36\',\r\n    },\r\n    logLevel: "info", //here\r\n    viewportSize: {width: 1300, height: 900},\r\n    verbose: true,\r\n    waitTimeout: 1000 * 60 * 60 * 24 * 365,\r\n    onWaitTimeout: function(){\r\n        console.log( \'waitFor*方法超时...\' )\r\n    }\r\n}\r\n\r\n```\r\n另外，在执行各个步骤时会把浏览器截图保存到`/static/img`，方便查看浏览器渲染情况。比如每获取到一条新消息时会截图并覆盖为`lastNewMsgContent.png`。\r\n\r\n\r\n> **二次开发若方便请`Fork`贡献给本[Github](https://github.com/doterlin/wechat-robot)，共同完善项目！**\r\n\r\n\r\n# 版本预告\r\n下一版本更新但不限于以下内容：\r\n> 1.支持绑定多个微信帐号\r\n> 2.UI化控制台（`node.js web`同步命令log及部分操作）\r\n> 3.支持图片识别和回复（如斗图）\r\n> 4.更多实用指令',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '5e004f6ee157f4ef0a1d557a7ea6e4fe5d16a127',
21 silly publish   _id: 'wechat-robot@1.0.0',
21 silly publish   _shasum: 'ec4e5e5b2c292423896e1898bfb2fd63c2070386',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name wechat-robot
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'wechat-robot',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'wechat-robot',
26 silly mapToRegistry   name: 'wechat-robot',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/wechat-robot
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading C:\Users\doterlin\AppData\Roaming\npm-cache\wechat-robot\1.0.0\package.tgz
30 verbose request uri https://registry.npmjs.org/wechat-robot
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 19:41:59
33 verbose request using bearer token for auth
34 verbose request id 0b19530c0a4b7f4c
35 http request PUT https://registry.npmjs.org/wechat-robot
36 http 403 https://registry.npmjs.org/wechat-robot
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '106',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Thu, 10 Aug 2017 11:42:18 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-nrt6123-NRT',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1502365331.060808,VS0,VE7229',
37 verbose headers   vary: 'Accept-Encoding, Accept' }
38 verbose request invalidating C:\Users\doterlin\AppData\Roaming\npm-cache\registry.npmjs.org\wechat-robot on PUT
39 error publish Failed PUT 403
40 verbose stack Error: you do not have permission to publish "wechat-robot". Are you logged in as the correct user? : wechat-robot
40 verbose stack     at makeError (D:\Apps\Node.js\node_modules\npm\node_modules\npm-registry-client\lib\request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (D:\Apps\Node.js\node_modules\npm\node_modules\npm-registry-client\lib\request.js:290:14)
40 verbose stack     at Request._callback (D:\Apps\Node.js\node_modules\npm\node_modules\npm-registry-client\lib\request.js:210:14)
40 verbose stack     at Request.self.callback (D:\Apps\Node.js\node_modules\npm\node_modules\request\request.js:187:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (D:\Apps\Node.js\node_modules\npm\node_modules\request\request.js:1048:10)
40 verbose stack     at emitOne (events.js:96:13)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (D:\Apps\Node.js\node_modules\npm\node_modules\request\request.js:969:12)
41 verbose statusCode 403
42 verbose pkgid wechat-robot
43 verbose cwd C:\Workspace\Projects\test\wechat-robot
44 error Windows_NT 10.0.15063
45 error argv "D:\\Apps\\Node.js\\node.exe" "D:\\Apps\\Node.js\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error node v6.10.0
47 error npm  v3.10.10
48 error code E403
49 error you do not have permission to publish "wechat-robot". Are you logged in as the correct user? : wechat-robot
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
